(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{347:function(n,t,a){"use strict";a.r(t);var i=a(4),s=Object(i.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[n._v("#")]),n._v(" git")]),n._v(" "),t("h3",{attrs:{id:"git基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git基本概念"}},[n._v("#")]),n._v(" git基本概念")]),n._v(" "),t("ul",[t("li",[n._v("工作区：仓库的目录。工作区是独立于各个分支的。")]),n._v(" "),t("li",[n._v("暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。")]),n._v(" "),t("li",[n._v("版本库：存放所有已经提交到本地仓库的代码版本")]),n._v(" "),t("li",[n._v("版本结构：树结构，树中每个节点代表一个代码版本。")])]),n._v(" "),t("h3",{attrs:{id:"git常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[n._v("#")]),n._v(" git常用命令")]),n._v(" "),t("ul",[t("li",[n._v("全局设置\ngit config --global user.name xxx：设置全局用户名，信息记录在~/.gitconfig文件中\ngit config --global user.email xxx@xxx.com：设置全局邮箱地址，信息记录在~/.gitconfig文件中\ngit init：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中")]),n._v(" "),t("li",[n._v('常用命令\ngit add XX ：将XX文件添加到暂存区\ngit commit -m "给自己看的备注信息"：将暂存区的内容提交到当前分支\ngit status：查看仓库状态\ngit log：查看当前分支的所有版本\ngit push -u (第一次需要-u以后不需要) ：将当前分支推送到远程仓库\ngit clone git@xxx:xxx/XXX.git：将远程仓库XXX下载到当前目录下\ngit branch：查看所有分支和当前所处分支')]),n._v(" "),t("li",[n._v("查看命令\ngit diff XX：查看XX文件相对于暂存区修改了哪些内容\ngit status：查看仓库状态\ngit log：查看当前分支的所有版本\ngit log --pretty=oneline：用一行来显示\ngit reflog：查看HEAD指针的移动历史（包括被回滚的版本）\ngit branch：查看所有分支和当前所处分支\ngit pull ：将远程仓库的当前分支与本地仓库的当前分支合并")]),n._v(" "),t("li",[n._v("删除命令\ngit rm --cached XX：将文件从仓库索引目录中删掉，不希望管理这个文件\ngit restore --staged xx：将xx从暂存区里移除\ngit checkout — XX或git restore XX：==将XX文件尚未加入暂存区的修改全部撤销")]),n._v(" "),t("li",[n._v("代码回滚\ngit reset --hard HEAD^ 或git reset --hard HEAD~ ：将代码库回滚到上一个版本\ngit reset --hard HEAD^^：往上回滚两次，以此类推\ngit reset --hard HEAD~100：往上回滚100个版本\ngit reset --hard 版本号：回滚到某一特定版本")]),n._v(" "),t("li",[n._v("远程仓库\ngit remote add origin git@xxx:xxx/XXX.git：将本地仓库关联到远程仓库\ngit push -u (第一次需要-u以后不需要) ：将当前分支推送到远程仓库\ngit push origin branch_name：将本地的某个分支推送到远程仓库\ngit clone git@xxx:xxx/XXX.git：将远程仓库XXX下载到当前目录下\ngit push --set-upstream origin branch_name：设置本地的branch_name分支对应远程仓库的branch_name分支\ngit push -d origin branch_name：删除远程仓库的branch_name分支\ngit checkout -t origin/branch_name 将远程的branch_name分支拉取到本地\ngit pull ：将远程仓库的当前分支与本地仓库的当前分支合并\ngit pull origin branch_name：将远程仓库的branch_name分支与本地仓库的当前分支合并\ngit branch --set-upstream-to=origin/branch_name1 branch_name2：将远程的branch_name1分支与本地的branch_name2分支对应")]),n._v(" "),t("li",[n._v("分支命令\ngit branch branch_name：创建新分支\ngit branch：查看所有分支和当前所处分支\ngit checkout -b branch_name：创建并切换到branch_name这个分支\ngit checkout branch_name：切换到branch_name这个分支\ngit merge branch_name：将分支branch_name合并到当前分支上\ngit branch -d branch_name：删除本地仓库的branch_name分支\ngit push --set-upstream origin branch_name：设置本地的branch_name分支对应远程仓库的branch_name分支\ngit push -d origin branch_name：删除远程仓库的branch_name分支\ngit checkout -t origin/branch_name 将远程的branch_name分支拉取到本地\ngit pull ：将远程仓库的当前分支与本地仓库的当前分支合并\ngit pull origin branch_name：将远程仓库的branch_name分支与本地仓库的当前分支合并\ngit branch --set-upstream-to=origin/branch_name1 branch_name2：将远程的branch_name1分支与本地的branch_name2分支对应")]),n._v(" "),t("li",[n._v("stash暂存\ngit stash：将工作区和暂存区中尚未提交的修改存入栈中\ngit stash apply：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素\ngit stash drop：删除栈顶存储的修改\ngit stash pop：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素\ngit stash list：查看栈中所有元素")])]),n._v(" "),t("h3",{attrs:{id:"git远程仓库流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git远程仓库流程"}},[n._v("#")]),n._v(" git远程仓库流程")]),n._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[n._v("git")]),n._v(" init "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 初始化git项目")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("git")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 将更改存到暂存区")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("git")]),n._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-m")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"提交提示"')]),n._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("git")]),n._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("add")]),n._v(" origin 远程仓库地址\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("git")]),n._v(" push "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-u")]),n._v(" origin master "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 推送到远程仓库")]),n._v("\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])])])}),[],!1,null,null,null);t.default=s.exports}}]);