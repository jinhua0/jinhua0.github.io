(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{350:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),s("h2",{attrs:{id:"动态规划基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划基础"}},[t._v("#")]),t._v(" 动态规划基础")]),t._v(" "),s("h3",{attrs:{id:"技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧"}},[t._v("#")]),t._v(" 技巧")]),t._v(" "),s("ul",[s("li",[t._v("直接考虑最后一步，dp[i] = Math.min(dp[i - 1],dp[i - 2]);")])]),t._v(" "),s("h3",{attrs:{id:"斐波那契数列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数列"}},[t._v("#")]),t._v(" 斐波那契数列")]),t._v(" "),s("ul",[s("li",[t._v("f(n) = f(n - 1) + f(n - 2)")]),t._v(" "),s("li",[t._v("dp,O(n),O(n)")]),t._v(" "),s("li",[t._v("dp,O(n),O(1)")]),t._v(" "),s("li",[t._v("递归，O(2^n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"爬楼梯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯"}},[t._v("#")]),t._v(" 爬楼梯")]),t._v(" "),s("ul",[s("li",[t._v("与斐波那契雷同,每次可以上1-2个台阶，上到顶楼需要多少种方法")]),t._v(" "),s("li",[t._v("dp[i]，表示爬到第i层有dp[i]中爬法")]),t._v(" "),s("li",[t._v("使用最小代价爬楼梯")]),t._v(" "),s("li",[t._v("支付当前楼梯的体力值，向上爬一到两个楼梯")]),t._v(" "),s("li",[t._v("dp[i],表示爬到台阶i，所消耗的最小体力值dp[i]")])]),t._v(" "),s("h3",{attrs:{id:"不同路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同路径"}},[t._v("#")]),t._v(" 不同路径")]),t._v(" "),s("ul",[s("li",[t._v("机器人只能向下或向右移动，走到右下角的路径数")]),t._v(" "),s("li",[t._v("dp[i][j] 到达(i,j)的路径数为dp[i][j]")]),t._v(" "),s("li",[t._v("dp[i][j] = dp[i - 1][j] + dp[i][j - 1];")]),t._v(" "),s("li",[t._v("二维：O(m * n),O(m * n)")]),t._v(" "),s("li",[t._v("一维：O(m * n)(m)")])]),t._v(" "),s("h3",{attrs:{id:"不同的路径2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同的路径2"}},[t._v("#")]),t._v(" 不同的路径2")]),t._v(" "),s("ul",[s("li",[t._v("左上角到右下角，总共的路径数，但是中间有障碍物")])]),t._v(" "),s("h3",{attrs:{id:"整数拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数拆分"}},[t._v("#")]),t._v(" 整数拆分")]),t._v(" "),s("ul",[s("li",[t._v("正整数拆分为两个正整数的和，积最大")]),t._v(" "),s("li",[t._v("dp[i] 表示整数i拆分为两个正整数的积最大值为dp[i]")]),t._v(" "),s("li",[t._v("数论，O(n),O(1)")]),t._v(" "),s("li",[t._v("dp[i] = max(dp[j] * dp[i - j],  j * (i - j)),O(n ^ 2),O(n)")])]),t._v(" "),s("h2",{attrs:{id:"不同二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同二叉搜索树"}},[t._v("#")]),t._v(" 不同二叉搜索树")]),t._v(" "),s("ul",[s("li",[t._v("n个节点组成的二叉搜索树的种类有多少种")]),t._v(" "),s("li",[t._v("dp[i] 表示i个节点二叉搜索树的种类数为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] += dp[j - 1] + dp[i - j],O(n ^ 2),O(n)")])]),t._v(" "),s("h2",{attrs:{id:"_01背包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01背包"}},[t._v("#")]),t._v(" 01背包")]),t._v(" "),s("h3",{attrs:{id:"模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 物品数量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 背包体积")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("就是放不放这个物品")]),t._v(" "),s("h3",{attrs:{id:"分割等和子集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分割等和子集"}},[t._v("#")]),t._v(" 分割等和子集")]),t._v(" "),s("ul",[s("li",[t._v("数组 拆分 两个子集，子集和得相等")]),t._v(" "),s("li",[t._v("dp[j],表示体积j下，对应的最大价值为dp[j]")]),t._v(" "),s("li",[t._v("O(n^2),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"最后一块石头的重量2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后一块石头的重量2"}},[t._v("#")]),t._v(" 最后一块石头的重量2")]),t._v(" "),s("ul",[s("li",[t._v("两个数，相等就粉碎，不相等，大数-小数重新放到数组")]),t._v(" "),s("li",[t._v("dp[j]表示容量为j的背包，最多石头重量为dp[j]")]),t._v(" "),s("li",[t._v("o(n * m),O(m)")])]),t._v(" "),s("h3",{attrs:{id:"目标和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目标和"}},[t._v("#")]),t._v(" 目标和")]),t._v(" "),s("ul",[s("li",[t._v("数组nums[]中的数，正负和为S")]),t._v(" "),s("li",[t._v("其实就是在找和为(target + sum) / 2的组合")]),t._v(" "),s("li",[t._v("dp[j] , 和为j共有dp[j]种方法")]),t._v(" "),s("li",[t._v("dp[j] = dp[j] + dp[j - nums[i]],O(n * n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"一和零"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一和零"}},[t._v("#")]),t._v(" 一和零")]),t._v(" "),s("ul",[s("li",[t._v("m个0，n个1，字符串strs的最大子集大小")]),t._v(" "),s("li",[t._v("dp[i][j]表示最多有i个0，j个1的最大子集大小为dp[i][j]")]),t._v(" "),s("li",[t._v("dp[i][j] = max(dp[i][j], dp[i - zero][j - one] + 1)")]),t._v(" "),s("li",[t._v("O(kmn),O(mn)")])]),t._v(" "),s("h2",{attrs:{id:"完全背包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全背包"}},[t._v("#")]),t._v(" 完全背包")]),t._v(" "),s("h3",{attrs:{id:"模板-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板-2"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 物品数量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 背包体积")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"零钱兑换2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零钱兑换2"}},[t._v("#")]),t._v(" 零钱兑换2")]),t._v(" "),s("ul",[s("li",[t._v("组成总金额为5的硬币组合数")]),t._v(" "),s("li",[t._v("dp[j]组成总金额为j的组合方式为dp[j]")]),t._v(" "),s("li",[t._v("dp[j] += dp[j - coin[i]] ,O(nm)O(m)")])]),t._v(" "),s("h3",{attrs:{id:"组合总和4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合总和4"}},[t._v("#")]),t._v(" 组合总和4")]),t._v(" "),s("ul",[s("li",[t._v("组成目标和target的排列个数")]),t._v(" "),s("li",[t._v("dp[j]表示组成目标和为j的排列数为dp[j]")]),t._v(" "),s("li",[t._v("dp[j] += dp[j - coin[i]]")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("如果求组合数就是外层for循环遍历物品，内层for遍历背包。\n如果求排列数就是外层for遍历背包，内层for循环遍历物品。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"爬楼梯-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#爬楼梯-2"}},[t._v("#")]),t._v(" 爬楼梯")]),t._v(" "),s("ul",[s("li",[t._v("每次可以爬1或2个台阶，爬到n阶的方法数")]),t._v(" "),s("li",[t._v("dp[i]表示i阶方式数为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] += dp[i - j] ,O(nm),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"零钱兑换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零钱兑换"}},[t._v("#")]),t._v(" 零钱兑换")]),t._v(" "),s("ul",[s("li",[t._v("凑成总和为amount的最少硬币组合数，硬币数量无限")]),t._v(" "),s("li",[t._v("dp[i] 表示组合成amount为i的最少硬币组合数为dp[i]")]),t._v(" "),s("li",[t._v("dp[j] = min(dp[j - nums[i]]+ 1, dp[j]),O(mn)O(m)")])]),t._v(" "),s("h3",{attrs:{id:"完全平方数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全平方数"}},[t._v("#")]),t._v(" 完全平方数")]),t._v(" "),s("ul",[s("li",[t._v("给定一个正整数n,返回和为n的完全平方数的最少数量")]),t._v(" "),s("li",[t._v("dp[j]:和为j的完全平方数的最少数量为dp[j]")]),t._v(" "),s("li",[t._v("dp[i] = min(dp[i], dp[i - j"),s("em",[t._v("j] + 1), O(n")]),t._v("根号n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"单词拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单词拆分"}},[t._v("#")]),t._v(" 单词拆分")]),t._v(" "),s("ul",[s("li",[t._v("wordDict数组中的字符串是否可以组合成 字符串s")]),t._v(" "),s("li",[t._v("dp[i],dp[i] = true表示字符串长度为i时可以拆分为字典中出现的单词")]),t._v(" "),s("li",[t._v("if(w.contains(s.substring(j,i)) && dp[j]) dp[i] = true")])]),t._v(" "),s("h2",{attrs:{id:"打家劫舍问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打家劫舍问题"}},[t._v("#")]),t._v(" 打家劫舍问题")]),t._v(" "),s("h3",{attrs:{id:"打家劫舍1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打家劫舍1"}},[t._v("#")]),t._v(" 打家劫舍1")]),t._v(" "),s("ul",[s("li",[t._v("nums[i],不能取相邻的数，取的数的和的最大值")]),t._v(" "),s("li",[t._v("dp[i]表示到第i号房屋，最大的收益为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] = max(dp[i - 1], dp[i - 2] +nums[i]);O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"打家劫舍2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打家劫舍2"}},[t._v("#")]),t._v(" 打家劫舍2")]),t._v(" "),s("ul",[s("li",[t._v("在1的基础上，加了个条件，第一个与最后一个相连")]),t._v(" "),s("li",[t._v("分情况考虑一下就是说：把环破坏掉，包含头、不包含尾；包含尾，不包含头")]),t._v(" "),s("li",[t._v("max(res1, res2),O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"打家劫舍3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打家劫舍3"}},[t._v("#")]),t._v(" 打家劫舍3")]),t._v(" "),s("ul",[s("li",[t._v("金额是以树的形式存储的")]),t._v(" "),s("li",[t._v("递归")]),t._v(" "),s("li",[t._v("偷父节点，不偷父节点两种情况，O(n^2),O(n)")]),t._v(" "),s("li",[t._v("优化版：记忆化递归，计算完的结果放到map.put(root,res),递归的时候，判断一下map里面是否有该key,O(n),O(logn)")]),t._v(" "),s("li",[t._v("树形dp,")]),t._v(" "),s("li",[t._v("res[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);")]),t._v(" "),s("li",[t._v("res[1] = root.val + left[0] + right[0];")])]),t._v(" "),s("h2",{attrs:{id:"股票系列问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#股票系列问题"}},[t._v("#")]),t._v(" 股票系列问题")]),t._v(" "),s("h3",{attrs:{id:"买卖股票的最佳时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机"}},[t._v("#")]),t._v(" 买卖股票的最佳时机")]),t._v(" "),s("ul",[s("li",[t._v("prices数组某一天买入股票，某一天卖出股票，返回最大利润")]),t._v(" "),s("li",[t._v("暴力，找最优间距，O(n^2),O(1)")]),t._v(" "),s("li",[t._v("贪心，左边找到最小值，右边找到最大值，差值为最大利润，O(n),O(1)")]),t._v(" "),s("li",[t._v("动态规划,dp[i][0]表示第i点持有股票的最大值，dp[i][1]表示第i点未持有股票的最大值")]),t._v(" "),s("li",[t._v("dp[i][0] = max(dp[i - 1][0], -price[i]),dp[i][1]=max(dp[i - 1][1], dp[i - 1][0] + price[i]),O(n),O(n)")]),t._v(" "),s("li",[t._v("dp优化，滚动数组，空间复杂度O(1)")])]),t._v(" "),s("h3",{attrs:{id:"买卖股票的最佳时机2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机2"}},[t._v("#")]),t._v(" 买卖股票的最佳时机2")]),t._v(" "),s("ul",[s("li",[t._v("可以进行多次交易")]),t._v(" "),s("li",[t._v("动态规划，dp[i][0] = max(dp[i - 1][0],dp[i - 1][1] - price[i]),dp[i][1] = max(dp[i - 1][1],dp[i - 1][0] + price[i]),O(n),O(n)")]),t._v(" "),s("li",[t._v("优化版，滚动数组，O(n),O(1)")])]),t._v(" "),s("h3",{attrs:{id:"买卖股票的最佳时机3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机3"}},[t._v("#")]),t._v(" 买卖股票的最佳时机3")]),t._v(" "),s("ul",[s("li",[t._v("最多可以完成两笔交易")]),t._v(" "),s("li",[t._v("定义5中状态0，1，2，3，4，O(n),O(n * 5)")]),t._v(" "),s("li",[t._v("优化 滚动数组，O(n),O(1)")])]),t._v(" "),s("h3",{attrs:{id:"买卖股票的最佳时机4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票的最佳时机4"}},[t._v("#")]),t._v(" 买卖股票的最佳时机4")]),t._v(" "),s("ul",[s("li",[t._v("最多完成 k 笔交易")])]),t._v(" "),s("h3",{attrs:{id:"最佳买卖股票的时机含冷冻期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳买卖股票的时机含冷冻期"}},[t._v("#")]),t._v(" 最佳买卖股票的时机含冷冻期")]),t._v(" "),s("ul",[s("li",[t._v("多次交易，冷冻期一天")]),t._v(" "),s("li",[t._v("dp,分的状态更多")])]),t._v(" "),s("h3",{attrs:{id:"买卖股票含手续费"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票含手续费"}},[t._v("#")]),t._v(" 买卖股票含手续费")]),t._v(" "),s("ul",[s("li",[t._v("可以多次交易，每次买入卖出只需支付一次手续费")]),t._v(" "),s("li",[t._v("买卖股票2的基础上")]),t._v(" "),s("li",[t._v("卖出时，支付fee,dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + price[i] - fee)")]),t._v(" "),s("li",[t._v("买入时支付fee,O(n),O(n)")]),t._v(" "),s("li",[t._v("优化，滚动数组，O(n),O(1)")])]),t._v(" "),s("h2",{attrs:{id:"子序列问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子序列问题"}},[t._v("#")]),t._v(" 子序列问题")]),t._v(" "),s("h3",{attrs:{id:"最长递增子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长递增子序列"}},[t._v("#")]),t._v(" 最长递增子序列")]),t._v(" "),s("ul",[s("li",[t._v("一个整数数组，最长递增子序列的长度")]),t._v(" "),s("li",[t._v("dp[i]，表示以下标i结尾，最长递增子序列的长度为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] = max(dp[i],dp[j] + 1),O(n^2),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"最长连续递增子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长连续递增子序列"}},[t._v("#")]),t._v(" 最长连续递增子序列")]),t._v(" "),s("ul",[s("li",[t._v("最长连续递增子序列的长度")]),t._v(" "),s("li",[t._v("dp[i]，表示以下标i结尾，最长连续递增子序列长度为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] = dp[i - 1] + 1;O(n),O(n)")]),t._v(" "),s("li",[t._v("贪心，遍历一次，O(n),O(1)")])]),t._v(" "),s("h3",{attrs:{id:"最长重复子数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长重复子数组"}},[t._v("#")]),t._v(" 最长重复子数组")]),t._v(" "),s("ul",[s("li",[t._v("返回两个数组中最长公共的、长度最长的子数组长度")]),t._v(" "),s("li",[t._v("dp[i][j]，表示以i - 1结尾的A，和以j - 1结尾的B，最长重复子数组dp[i][j]")]),t._v(" "),s("li",[t._v("dp[i][j] = dp[i - 1][j - 1] + 1, O(n * m), O(n * m)")]),t._v(" "),s("li",[t._v("优化，滚动数组，O(n*m),O(m)")])]),t._v(" "),s("h3",{attrs:{id:"最长公共子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长公共子序列"}},[t._v("#")]),t._v(" 最长公共子序列")]),t._v(" "),s("ul",[s("li",[t._v("返回两个字符串最长公共子序列的长度")]),t._v(" "),s("li",[t._v("dp[i][j],以text1[i - 1]结尾的子串与text2[j - 1]结尾的子串，最长公共子串为dp[i][j]")]),t._v(" "),s("li",[t._v("相等：dp[i][j] = dp[i - 1][j - 1] + 1,不相等：dp[i][j] = max(dp[i -1][j],dp[i][j - 1])O(m * n),O(m * n)")])]),t._v(" "),s("h3",{attrs:{id:"不相交的线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不相交的线"}},[t._v("#")]),t._v(" 不相交的线")]),t._v(" "),s("ul",[s("li",[t._v("A[i] == B[j]的不相交的线最多有多少条")]),t._v(" "),s("li",[t._v("dp[i][j]表示以A[i - 1]结尾的子序列与B[j - 1]结尾的子序列，最长公共子序列为dp[i][j]")]),t._v(" "),s("li",[t._v("与最长公共子序列一致")])]),t._v(" "),s("h3",{attrs:{id:"最大子数组和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大子数组和"}},[t._v("#")]),t._v(" 最大子数组和")]),t._v(" "),s("ul",[s("li",[t._v("找到一个最大和的连续子数组")]),t._v(" "),s("li",[t._v("dp[i]:以nums[i]为结尾的最大连续子数组和为dp[i]")]),t._v(" "),s("li",[t._v("dp[i] = max(nums[i],dp[i - 1] + nums[i]),O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"判断子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断子序列"}},[t._v("#")]),t._v(" 判断子序列")]),t._v(" "),s("ul",[s("li",[t._v("s是否为t的子序列")]),t._v(" "),s("li",[t._v("dp[i][j]表示以s[i- 1]结尾和 t[j-1]结尾子序列长度为dp[i][j]")]),t._v(" "),s("li",[t._v("思路就是直接求它们的最长公共子序列，最后最长公共子序列等于s.length()就是true,O(m"),s("em",[t._v("m)O(n")]),t._v("m)")])]),t._v(" "),s("h3",{attrs:{id:"不同的子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同的子序列"}},[t._v("#")]),t._v(" 不同的子序列")]),t._v(" "),s("ul",[s("li",[t._v("字符串s中 字符串t出现的次数")]),t._v(" "),s("li",[t._v("dp[i][j]：以i-1为结尾的s子序列中出现以j-1为结尾的t的个数为dp[i][j]。")]),t._v(" "),s("li",[t._v("if '相等', dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];if '不等',dp[i - 1][j]")])]),t._v(" "),s("h3",{attrs:{id:"两个字符串的删除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个字符串的删除操作"}},[t._v("#")]),t._v(" 两个字符串的删除操作")]),t._v(" "),s("ul",[s("li",[t._v("word1变为word2的最少步数，只能进行删除")]),t._v(" "),s("li",[t._v("dp[i][j]，i-1,j-1最少步数为dp[i][j]")]),t._v(" "),s("li",[t._v("if '相等'，dp[i][j] = dp[i - 1][j - 1]; else  min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);")])]),t._v(" "),s("h3",{attrs:{id:"编辑距离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑距离"}},[t._v("#")]),t._v(" 编辑距离")]),t._v(" "),s("ul",[s("li",[t._v("word1 变为 word2的最少步数")]),t._v(" "),s("li",[t._v("dp[i][j]表示word1,i-1、word2,j-1,最近编辑距离为dp[i][j]")]),t._v(" "),s("li",[t._v("if '相等'，dp[i][j] = dp[i - 1][j - 1];if '不相等',dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]}) + 1;O(n"),s("em",[t._v("m),O(n")]),t._v("m)")])]),t._v(" "),s("h3",{attrs:{id:"回文子串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回文子串"}},[t._v("#")]),t._v(" 回文子串")]),t._v(" "),s("ul",[s("li",[t._v("一个字符串里面有多少个回文子串")]),t._v(" "),s("li",[t._v("布尔类型的dp[i][j]：表示区间范围[i,j] （注意是左闭右闭）的子串是否是回文子串，如果是dp[i][j]为true，否则为false。")])]),t._v(" "),s("h3",{attrs:{id:"最长回文子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最长回文子序列"}},[t._v("#")]),t._v(" 最长回文子序列")]),t._v(" "),s("ul",[s("li",[t._v("一个字符串里面的最长的 回文子序列长度")]),t._v(" "),s("li",[t._v("dp[i][j]：字符串s在[i, j]范围内最长的回文子序列的长度为dp[i][j]。")]),t._v(" "),s("li",[t._v("遍历顺序从下往上，从左往右，O(n^2),O(n^2) 输出dp[0][s.length() - 1]")])]),t._v(" "),s("h1",{attrs:{id:"单调栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单调栈"}},[t._v("#")]),t._v(" 单调栈")]),t._v(" "),s("h3",{attrs:{id:"模板-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板-3"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// res[stack.peek()] = i - stack.pop();")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理逻辑")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h3",{attrs:{id:"每日温度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每日温度"}},[t._v("#")]),t._v(" 每日温度")]),t._v(" "),s("ul",[s("li",[t._v("数组nums[],想要得到一个数组，res[],res[i]表示在nums中比nums[i]大的最近的nums[j]，res[i] = j - i")]),t._v(" "),s("li",[t._v("单调栈思路就是，如果st[top] >= nums[i],st.push(nums[i]); else 就st.pop,res[x] = i - x;O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"下一个最大的元素1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下一个最大的元素1"}},[t._v("#")]),t._v(" 下一个最大的元素1")]),t._v(" "),s("ul",[s("li",[t._v("nums1 是 nums2 的子集，在nums2中找到下一个比它大的数")]),t._v(" "),s("li",[t._v("单调栈，O(n)O(n)")])]),t._v(" "),s("h3",{attrs:{id:"下一个最大的元素2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下一个最大的元素2"}},[t._v("#")]),t._v(" 下一个最大的元素2")]),t._v(" "),s("ul",[s("li",[t._v("在1的基础上可以循环的搜索")]),t._v(" "),s("li",[t._v("搜索两次，对i%size,单调栈，O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"接雨水"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接雨水"}},[t._v("#")]),t._v(" 接雨水")]),t._v(" "),s("ul",[s("li",[t._v("柱子接到的雨水的面积")]),t._v(" "),s("li",[t._v("单调栈，O(n),O(n)")])]),t._v(" "),s("h2",{attrs:{id:"柱形图里的最大矩形"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#柱形图里的最大矩形"}},[t._v("#")]),t._v(" 柱形图里的最大矩形")]),t._v(" "),s("ul",[s("li",[t._v("柱形图最大面积")]),t._v(" "),s("li",[t._v("先找左边界，再找有边界，最后计算面积的最大值，O(n^2)O(n)")])]),t._v(" "),s("h1",{attrs:{id:"二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),s("h3",{attrs:{id:"二叉树的前序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的前序遍历"}},[t._v("#")]),t._v(" 二叉树的前序遍历")]),t._v(" "),s("ul",[s("li",[t._v("递归")]),t._v(" "),s("li",[t._v("参数返回值：traversal(TreeNode root, List"),s("Integer",[t._v(" res)")])],1),t._v(" "),s("li",[t._v("终止条件：if (root == null) return")]),t._v(" "),s("li",[t._v("每层的逻辑：")])]),t._v(" "),s("h3",{attrs:{id:"二叉树的前序遍历-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的前序遍历-2"}},[t._v("#")]),t._v(" 二叉树的前序遍历")]),t._v(" "),s("ul",[s("li",[t._v("迭代")]),t._v(" "),s("li",[t._v("栈，入栈顺序中，右，左")]),t._v(" "),s("li",[t._v("O(n),O(h),h为二叉树的高度")])]),t._v(" "),s("h3",{attrs:{id:"二叉树的中序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的中序遍历"}},[t._v("#")]),t._v(" 二叉树的中序遍历")]),t._v(" "),s("ul",[s("li",[t._v("迭代")]),t._v(" "),s("li",[t._v("栈，入栈顺序 左、右")]),t._v(" "),s("li",[t._v("O(n),O(h)")])]),t._v(" "),s("h3",{attrs:{id:"二叉树的后序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的后序遍历"}},[t._v("#")]),t._v(" 二叉树的后序遍历")]),t._v(" "),s("ul",[s("li",[t._v("迭代")]),t._v(" "),s("li",[t._v("栈，入栈顺序 中 左 右,再将结果列表反转一下")]),t._v(" "),s("li",[t._v("O(n),O(h)")])]),t._v(" "),s("h3",{attrs:{id:"二叉树的层序遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的层序遍历"}},[t._v("#")]),t._v(" 二叉树的层序遍历")]),t._v(" "),s("ul",[s("li",[t._v("层序遍历返回二叉树所有节点")]),t._v(" "),s("li",[t._v("队列，O(n),O(n)")])]),t._v(" "),s("h3",{attrs:{id:"反转二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反转二叉树"}},[t._v("#")]),t._v(" 反转二叉树")]),t._v(" "),s("ul",[s("li",[t._v("反转二叉树每个节点的左右孩子")]),t._v(" "),s("li",[t._v("递归，参数返回值：TreeNode main(TreeNode root); 确定终止条件;确定单层递归逻辑")]),t._v(" "),s("li",[t._v("迭代，栈 入栈顺序：中右左")]),t._v(" "),s("li",[t._v("BFS，队列，中 左右")])]),t._v(" "),s("h3",{attrs:{id:"对称二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对称二叉树"}},[t._v("#")]),t._v(" 对称二叉树")]),t._v(" "),s("ul",[s("li",[t._v("判断二叉树是不是镜像对称")]),t._v(" "),s("li",[t._v("递归，终止条件将各种情况考虑充分；递归逻辑：镜像对称逻辑")]),t._v(" "),s("li",[t._v("迭代，队列")])]),t._v(" "),s("h3",{attrs:{id:"完全二叉树的节点个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树的节点个数"}},[t._v("#")]),t._v(" 完全二叉树的节点个数")]),t._v(" "),s("ul",[s("li",[t._v("一般二叉树、满二叉树")]),t._v(" "),s("li",[t._v("递归")]),t._v(" "),s("li",[t._v("迭代")])]),t._v(" "),s("h3",{attrs:{id:"平衡二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[t._v("#")]),t._v(" 平衡二叉树")]),t._v(" "),s("h3",{attrs:{id:"二叉树的所有路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的所有路径"}},[t._v("#")]),t._v(" 二叉树的所有路径")]),t._v(" "),s("ul",[s("li",[t._v("返回根节点到叶子节点的所有路径")]),t._v(" "),s("li",[t._v("递归 + 回溯")])]),t._v(" "),s("h3",{attrs:{id:"左叶子之和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#左叶子之和"}},[t._v("#")]),t._v(" 左叶子之和")]),t._v(" "),s("ul",[s("li",[t._v("计算左叶子之和")]),t._v(" "),s("li",[t._v("递归，后序遍历，左右中")]),t._v(" "),s("li",[t._v("迭代法，前序遍历")])]),t._v(" "),s("h3",{attrs:{id:"找左下角的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#找左下角的值"}},[t._v("#")]),t._v(" 找左下角的值")]),t._v(" "),s("ul",[s("li",[t._v("最后一行最左边的值")]),t._v(" "),s("li",[t._v("递归，直接前序遍历，遍历到  最左边 且深度发生变化的节点，就是目标节点")]),t._v(" "),s("li",[t._v("迭代，全局变量，只存每行的第一个节点的val值")])]),t._v(" "),s("h1",{attrs:{id:"回溯算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),s("h3",{attrs:{id:"模板-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板-4"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backTracking")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backTracking")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 终止条件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" startIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("backTracking")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeLast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("h2",{attrs:{id:"组合问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合问题"}},[t._v("#")]),t._v(" 组合问题")]),t._v(" "),s("h3",{attrs:{id:"组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合")]),t._v(" "),s("ul",[s("li",[t._v("输入n,k;n为1到n中取值，k为取几个值进行组合")]),t._v(" "),s("li",[t._v("回溯，O(n * n!); O(n)")]),t._v(" "),s("li",[t._v("剪枝优化，i <= n - (k - path.size()) + 1")])]),t._v(" "),s("h3",{attrs:{id:"组合总和1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合总和1"}},[t._v("#")]),t._v(" 组合总和1")]),t._v(" "),s("ul",[s("li",[t._v("nums[],无重复数字,目标和target,nums[]中元素可以重复使用，找出目标和为target的所有组合")]),t._v(" "),s("li",[t._v("回溯,O(n*n!);O(n)")]),t._v(" "),s("li",[t._v("剪枝优化,O(n*n!);O(n)")])]),t._v(" "),s("h3",{attrs:{id:"组合总和2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合总和2"}},[t._v("#")]),t._v(" 组合总和2")]),t._v(" "),s("ul",[s("li",[t._v("有重复数字，不能重复使用元素，找出所有组合")]),t._v(" "),s("li",[t._v("使用标记数组，i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false 同层中有没有使用过；used[i - 1] == true,不同层有没有使用过")]),t._v(" "),s("li",[t._v("不使用标记数组， i > start && nums[i] == nums[i - 1]")])]),t._v(" "),s("h3",{attrs:{id:"组合总和3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合总和3"}},[t._v("#")]),t._v(" 组合总和3")]),t._v(" "),s("ul",[s("li",[t._v("k个数相加和为n，不能重复")]),t._v(" "),s("li",[t._v("回溯，O(n*n!);O(n)")]),t._v(" "),s("li",[t._v("剪枝，O(n * n!);O(n)")])]),t._v(" "),s("h2",{attrs:{id:"分割问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分割问题"}},[t._v("#")]),t._v(" 分割问题")]),t._v(" "),s("h3",{attrs:{id:"分割回文串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分割回文串"}},[t._v("#")]),t._v(" 分割回文串")]),t._v(" "),s("ul",[s("li",[t._v("字符串s,分割成一些子串，每个子串都是回文串")]),t._v(" "),s("li",[t._v("回溯")])]),t._v(" "),s("h2",{attrs:{id:"子集问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子集问题"}},[t._v("#")]),t._v(" 子集问题")]),t._v(" "),s("h3",{attrs:{id:"子集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子集"}},[t._v("#")]),t._v(" 子集")]),t._v(" "),s("ul",[s("li",[t._v("给定一组不含重复元素的数组nums[],返回所有可能的子集")])]),t._v(" "),s("h3",{attrs:{id:"子集2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子集2"}},[t._v("#")]),t._v(" 子集2")]),t._v(" "),s("ul",[s("li",[t._v("给定一个含重复元素的数组nums[],返回所有子集")]),t._v(" "),s("li",[t._v("使用标记数组")]),t._v(" "),s("li",[t._v("不使用标记数组")])]),t._v(" "),s("h2",{attrs:{id:"排列问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排列问题"}},[t._v("#")]),t._v(" 排列问题")]),t._v(" "),s("h3",{attrs:{id:"全排列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全排列"}},[t._v("#")]),t._v(" 全排列")]),t._v(" "),s("ul",[s("li",[t._v("没有重复数字的序列，返回可能的全排列")]),t._v(" "),s("li",[t._v("使用标记数组")]),t._v(" "),s("li",[t._v("不使用标记数组")])]),t._v(" "),s("h3",{attrs:{id:"全排列2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全排列2"}},[t._v("#")]),t._v(" 全排列2")]),t._v(" "),s("ul",[s("li",[t._v("序列中有重复数字，返回可能的全排列")]),t._v(" "),s("li",[t._v("使用标记数组")]),t._v(" "),s("li",[t._v("不使用标记数组")])]),t._v(" "),s("h2",{attrs:{id:"棋盘问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#棋盘问题"}},[t._v("#")]),t._v(" 棋盘问题")]),t._v(" "),s("h3",{attrs:{id:"n皇后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#n皇后"}},[t._v("#")]),t._v(" N皇后")]),t._v(" "),s("h3",{attrs:{id:"解数独"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解数独"}},[t._v("#")]),t._v(" 解数独")])])}),[],!1,null,null,null);s.default=r.exports}}]);